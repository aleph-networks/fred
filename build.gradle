/*
 * Build script for Fred. Currently it works under Gradle version 7.
 *
 * ===============
 * Dependency tree
 * ===============
 *
 * :build
 * +--- :assemble
 * |    +--- :copyRuntimeLibs
 * |    |    \--- :jar2
 * |    |         +--- :classes
 * |    |         |    +--- :compileJava
 * |    |         |    +--- :copyResourcesToClasses2
 * |    |         |    \--- :processResources
 * |    |         \--- :compileVersion
 * |    |              +--- :buildInfo
 * |    |              +--- :classes *
 * |    |              +--- :compileJava *
 * |    |              \--- :copyVersion
 * |    \--- :jar
 * |         +--- :classes *
 * |         \--- :jar2 *
 * \--- :check
 *      \--- :test
 *           +--- :classes *
 *           \--- :testClasses
 *                +--- :compileTestJava
 *                |    \--- :classes *
 *                +--- :copyTestResourcesToClasses2
 *                \--- :processTestResources
 *
 * =======================
 * Dependency verification
 * =======================
 *
 * Java dependencies are verified by Gradle.
 * Each time any dependencies are changed, run the following commands to update verification-metadata.xml:
 * ./gradlew --write-verification-metadata sha512 help
 * ./gradlew --write-verification-metadata pgp,sha512 help --export-keys
 *
 * If you don't want to be bothered by failed verifications, add the following line to gradle.properties:
 * org.gradle.dependency.verification=lenient
 *
 * Read more here: https://docs.gradle.org/current/userguide/dependency_verification.html
 *
 */

plugins {
    id "java"
    id "maven-publish"
//    id "com.dorongold.task-tree" version "2.1.0"
}

repositories {
    maven { url 'https://mvn.freenetproject.org' }
    mavenCentral()
}

dependencies {
    implementation "org.bouncycastle:bcprov-jdk15on:1.59"
    implementation "net.java.dev.jna:jna:4.5.2"
    implementation "net.java.dev.jna:jna-platform:4.5.2"
    implementation "org.freenetproject:freenet-ext:29"

    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-core:1.9.5"
    testImplementation "org.hamcrest:hamcrest-library:1.3"
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }

    test {
        java {
            srcDirs = ['test']
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.release = 8
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc).configureEach {
    options.encoding = "UTF-8"
}

def version_buildir = "$projectDir/build/tmp/compileVersion/"
def version_src = 'freenet/node/Version.java'

// Fetch git version
String gitrev
tasks.register("buildInfo") {
    try {
        def cmd = "git describe --always --abbrev=4 --dirty"
        def proc = cmd.execute()
        gitrev = proc.text.trim()
    } catch (IOException ignored) {
        gitrev = "@unknown@"
    }
}

// Modify git version in Version.java and copy it to tmp directory
tasks.register("copyVersion", Copy) {
    from sourceSets.main.java.srcDirs
    into "${version_buildir}"
    include "${version_src}"
    filter {
        String line -> line.replaceAll("@custom@", "${gitrev}")
    }
}

// Compile modified Version.java
// Implicitly depends on "classes" task as it has reference to sourceSets.main.output.classesDirs
tasks.register("compileVersion", JavaCompile) {
    dependsOn "buildInfo"
    dependsOn "compileJava"
    dependsOn "copyVersion"

    source = "${version_buildir}"
    include "${version_src}"
    classpath = files(sourceSets.main.compileClasspath, sourceSets.main.output.classesDirs)
    destinationDirectory = file("${buildDir}/java/version/")
}

// Copy required resources to java classes directory
tasks.register("copyResourcesToClasses2") {
    inputs.files sourceSets.main.java.srcDirs
    outputs.dir sourceSets.main.java.classesDirectory
    doLast {
        copy {
            from sourceSets.main.java.srcDirs
            into sourceSets.main.java.classesDirectory
            include 'freenet/l10n/*properties'
            include 'freenet/l10n/iso-*.tab'
            include 'freenet/clients/http/staticfiles/**'
            include '../dependencies.properties'
        }
        copy {
            from "${projectDir}/"
            into sourceSets.main.java.classesDirectory
            include 'dependencies.properties'
        }
    }
}

tasks.named("classes").configure {
    dependsOn 'copyResourcesToClasses2'
}

// Custom task to assemble Jar
tasks.register("jar2", Jar) {
    dependsOn 'classes'

    from (compileVersion) {
        include 'freenet/node/Version**class'
    }
    from ("${buildDir}/classes/java/main/") {
        exclude 'freenet/node/Version.class'
        exclude 'freenet/node/Version$1.class'
    }

    preserveFileTimestamps = false
    reproducibleFileOrder = true
    duplicatesStrategy = "warn"
    archivesBaseName = "freenet"
    manifest {
        attributes("Permissions": "all-permissions")
        attributes("Application-Name": "Freenet REference Daemon")
        attributes("Required-Ext-Version": 29)
        attributes("Recommended-Ext-Version": 29)
        attributes("Compiled-With": "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})")
        attributes([
                "Specification-Title": "Freenet",
                "Specification-Version": "0.7.5",
                "Specification-Vendor": "freenetproject.org",
                "Implementation-Title": "Freenet",
                "Implementation-Version": "0.7.5 ${gitrev}",
                "Implementation-Vendor": "freenetproject.org",
        ], "common")
    }
}

// New way to replace the original jar task
// https://stackoverflow.com/questions/63189888/gradle-cannot-overwrite-task-with-overwritetrue
tasks.named("jar").configure {
    dependsOn 'jar2'

    actions.clear()
}

// Copy required test resources to java test classes directory
tasks.register("copyTestResourcesToClasses2") {
    inputs.files sourceSets.test.java.srcDirs
    outputs.dir sourceSets.test.java.classesDirectory
    doLast {
        copy {
            from sourceSets.test.java.srcDirs
            into sourceSets.test.java.classesDirectory
            include 'freenet/client/filter/*/**'
            include 'freenet/crypt/ciphers/rijndael-gladman-test-data/**'
            include 'freenet/l10n/*properties'
        }
    }
}

tasks.named("testClasses").configure {
    dependsOn 'copyTestResourcesToClasses2'
}

test {
    useJUnit()

    minHeapSize = "128m"
    maxHeapSize = "512m"
    // no inner class
    include 'freenet/**/*Test.class'
    exclude 'freenet/**/*$*Test.class'
    workingDir = sourceSets.test.java.classesDirectory
    scanForTestClasses = false
    systemProperties += [
            "test.l10npath_test": "freenet/l10n/",
            "test.l10npath_main": "../main/freenet/l10n/"
//	"test.extensive":
//	"test.verbose":
//	"test.benchmark":
    ]
    testLogging {
        exceptionFormat = 'full'
    }
    // Currently freenet doesn't support Java module. To make the building process
    // working, we need to add the following args
    if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
        jvmArgs = [
                "--add-opens", "java.base/java.lang=ALL-UNNAMED",
                "--add-opens", "java.base/java.io=ALL-UNNAMED",
        ]
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'org.freenetproject'
            artifactId "fred"
            version gitrev
            from components.java
        }
    }
    repositories {
        maven {
            url "s3://mvn.freenetproject.org/"
            credentials(AwsCredentials) {
                accessKey System.getenv('AWS_ACCESS_KEY_ID')
                secretKey System.getenv('AWS_SECRET_ACCESS_KEY')
            }
        }
    }
}

tasks.register("copyRuntimeLibs", Copy) {
    dependsOn "jar2"

    into "${buildDir}/output/"
    from configurations.runtimeClasspath
    from jar2
}
tasks.named("assemble").configure {
    dependsOn 'copyRuntimeLibs'
}

tasks.register("tar", Tar) {
    description = "Build a source release, specifically excluding the build directories and gradle wrapper files"
    compression = Compression.BZIP2

    archiveBaseName = "freenet-sources"

    from(project.rootDir) {
        exclude '**/build'
        exclude 'build'
        exclude '.gradle'
    }

    into(archiveBaseName)

    preserveFileTimestamps = false
    reproducibleFileOrder = true

    // Set destination directory.
    destinationDirectory = file("${project.buildDir}")

    archiveFileName = "${archiveBaseName.get()}.tgz"
    doLast { // generate md5 checksum
        ant.checksum file:"${archiveFile.get().asFile.absolutePath}"
    }
}

tasks.named("javadoc").configure {
    failOnError = false
}